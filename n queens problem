class Solution {
public:
    bool issafe(int row,int col, vector<vector<string>>& board,int n)
    {
        int x=row;
        int y=col;
        while(y>=0)
        {
            if(board[x][y]=="Q")
                return false;
            y--;
        }
        x=row;
        y=col;
        while(x>=0 && y>=0)
        {
            if(board[x][y]=="Q")
                return false;
            y--;
            x--;
        }
        x=row;
        y=col;
        while(x<n && y>=0)
        {
            if(board[x][y]=="Q")
                return false;
            y--;
            x++;
        }
        return true;
    }
    void addsolution(vector<vector<string>>& board,vector<vector<string>>& ans,int n)
    {
        vector<string> v;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                v.push_back(board[i][j]);
            }
        }
        ans.push_back(v);
    }
    void solve(int col,vector<vector<string>>& board,vector<vector<string>>& ans,int n)
    {
        if(col== n)
        {
            addsolution(board,ans,n);
            return;
        }
        for(int row=0;row<n;row++)
        {
            if(issafe(row,col,board,n))
            {
            board[row][col]="Q";
            solve(col+1,board,ans,n);
            board[row][col]=".";
            }
            
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> board(n,vector<char>>(n,'.'));
        vector<vector<string>> ans;
        solve(0,board,ans,n);
        return ans;
    }
};
